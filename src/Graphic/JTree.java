package Graphic;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JFrame;

/**
 *
 * @author utente
 */
public class JTree extends javax.swing.JFrame {

    String input;
    PanelNode root;
    ArrayList<Character> alphabet = new ArrayList();

    public JTree() {
        initComponents();
    }

    private void setInput(String input) {
        if (root != null) {
            removeTree(root);
        }
        this.input = input;
        alphabet = PanelNode.createAlphabet(input.toCharArray());
        root = new PanelNode(alphabet.get(alphabet.size() / 2));
        root.createTree(input, alphabet);
        comboChar.removeAllItems();
        comboIndex.removeAllItems();
        drawTree(root, 0, 700, null);
        repaint();
        alphabet.forEach((ch) -> {
            comboChar.addItem(ch.toString());
        });
        for (Integer i = 1; i < input.length(); i++) {
            comboIndex.addItem(i.toString());
        }
    }

    private void removeTree(PanelNode n) {
        this.remove(n);
        if (n.getLeft() != null) {
            removeTree(n.getLeft());
        }
        if (n.getRight() != null) {
            removeTree(n.getRight());
        }
    }

    private void drawTree(PanelNode node, int times, int xPos, Boolean isLeft) {
        //PanelNode yourPanel = new PanelNode(); // create your JPanel
        node.jl.setText(node.toString());
        node.setLayout(null); // set the layout null for this JPanel !
        this.add(node);
        //  nl = new NodeLabel(n); // create some stuff
        int leng = node.toString().length() * 10 + 10;
        node.jl.setBounds(0, 0, 100, 50); // set your position of your elements inside your JPanel
        node.setBorder(BorderFactory.createLineBorder(Color.black)); // set a testing border to help you position the elements better
        if (times > 0) {
            int x = isLeft ? xPos - leng / 2 : xPos - leng / 2;
            int y = 20 + 100 * times;
            node.setBounds(x, y, leng, 50);
        } else { // set the location of the JPanel
            node.setBounds(xPos - leng / 2, 20, leng, 50);
        }
        if (node.getLeft() != null) {
            int leftPos = (xPos > 700) ? xPos - (200 - 50 * times) : xPos - (200 - 50 * times);
            // System.out.println("times " + times + " left x " + leftPos);
            drawTree(node.getLeft(), times + 1, leftPos, true);
        }
        if (node.getRight() != null) {
            int rightPos = (xPos > 700) ? xPos + (200 - 50 * times) : xPos + (200 - 50 * times);
            //   System.out.println("times " + times + " right x " + rightPos);
            drawTree(node.getRight(), times + 1, rightPos, false);
        }

        // this.setLayout(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opCombo = new javax.swing.JComboBox<>();
        comboIndex = new javax.swing.JComboBox<>();
        buttonPerform = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        outputLabel = new javax.swing.JLabel();
        comboChar = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        opCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "select", "rank", " " }));
        opCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opComboActionPerformed(evt);
            }
        });

        buttonPerform.setText("GO");
        buttonPerform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPerformActionPerformed(evt);
            }
        });

        inputTextArea.setColumns(20);
        inputTextArea.setRows(5);
        jScrollPane1.setViewportView(inputTextArea);

        jButton1.setText("Select String");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(comboIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(comboChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonPerform, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(opCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 971, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)))
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(29, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(opCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboChar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboIndex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(582, 582, 582))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(buttonPerform, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(outputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void opComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opComboActionPerformed

    }//GEN-LAST:event_opComboActionPerformed

    private void buttonPerformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPerformActionPerformed
        String strChar = (String) comboChar.getSelectedItem();
        int i = Integer.parseInt((String) comboIndex.getSelectedItem());
        char ch = strChar.charAt(0);
        String operation = (String) opCombo.getSelectedItem();
        int result;
        if (root != null) {
            removeTree(root);
        }
        drawTree(root, 0, 700, null);
        paint(this.getGraphics());
        if (operation.equals("rank")) {
            result = root.rank(i, ch);
            outputLabel.setText("There are " + result + " occurrences of " + ch + " until index " + i);
        } else {
            result = root.select( ch, i);
            if (result <= 0) {
                outputLabel.setText("There aren't " + i + " occurrences of " + ch);
            } else {
                outputLabel.setText("The occurrence number " + i + " of " + ch + " is in position " + result);
            }
        }
        repaint();
    }//GEN-LAST:event_buttonPerformActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setInput(inputTextArea.getText());
    }//GEN-LAST:event_jButton1ActionPerformed

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (root != null) {
            drawLines(g, root);
        }
    }

    /*Drawing the lines between the nodes and then two small lines for making an arrow*/
    public void drawLines(Graphics g, PanelNode p) {
        int leng = (p.toString().length() * 10 + 30) / 2;
        if (p.getLeft() != null) {
            int lengLeft = (p.getLeft().toString().length() * 10 + 30) / 2;
            g.drawLine(p.getX() + leng, p.getY() + 30, p.getLeft().getX() + lengLeft, p.getLeft().getY() + 30);
            g.drawLine(p.getLeft().getX() + lengLeft, p.getLeft().getY() + 30, p.getLeft().getX() + lengLeft + 20, p.getLeft().getY() + 25);
            g.drawLine(p.getLeft().getX() + lengLeft, p.getLeft().getY() + 30, p.getLeft().getX() + lengLeft + 5, p.getLeft().getY() + 10);
            drawLines(g, p.getLeft());
        }
        if (p.getRight() != null) {
            int lengRight = (p.getRight().toString().length() * 10 + 30) / 2;
            g.drawLine(p.getX() + leng, p.getY() + 30, p.getRight().getX() + lengRight, p.getRight().getY() + 30);
            g.drawLine(p.getRight().getX() + lengRight, p.getRight().getY() + 30, p.getRight().getX() + lengRight - 20, p.getRight().getY() + 25);
            g.drawLine(p.getRight().getX() + lengRight, p.getRight().getY() + 30, p.getRight().getX() + lengRight - 5, p.getRight().getY() + 10);
            drawLines(g, p.getRight());
        }

    }

    public static void main(String[] args) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            JTree frame = new JTree();
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonPerform;
    private javax.swing.JComboBox<String> comboChar;
    private javax.swing.JComboBox<String> comboIndex;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> opCombo;
    private javax.swing.JLabel outputLabel;
    // End of variables declaration//GEN-END:variables
}
